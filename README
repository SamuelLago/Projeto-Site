# Projeto Site Full-Stack (React + Node.js)

Bem-vindo ao Projeto Site! Esta √© uma aplica√ß√£o web full-stack desenvolvida com um frontend moderno em React e um backend robusto utilizando Node.js, Express e MongoDB. O objetivo principal da aplica√ß√£o √© gerenciar usu√°rios, permitindo o cadastro e a consulta de informa√ß√µes.

---

## üìú √çndice

* [Tecnologias Utilizadas](#-tecnologias-utilizadas)
* [Pr√©-requisitos](#-pr√©-requisitos)
* [Como Executar o Projeto](#-como-executar-o-projeto)
    * [Backend](#-backend)
    * [Frontend](#-frontend)
* [Estrutura de Pastas](#-estrutura-de-pastas)
* [Endpoints da API](#-endpoints-da-api)
* [Pr√≥ximos Passos](#-pr√≥ximos-passos)

---

## ‚ú® Tecnologias Utilizadas

Este projeto foi constru√≠do utilizando as seguintes tecnologias:

### **Frontend**
* **[React](https://reactjs.org/)**: Biblioteca para construir interfaces de usu√°rio.
* **[TypeScript](https://www.typescriptlang.org/)**: Superset do JavaScript que adiciona tipagem est√°tica.
* **[Vite](https://vitejs.dev/)**: Ferramenta de build moderna e ultrarr√°pida para o desenvolvimento frontend.

### **Backend**
* **[Node.js](https://nodejs.org/)**: Ambiente de execu√ß√£o JavaScript no servidor.
* **[Express](https://expressjs.com/)**: Framework para Node.js que simplifica a cria√ß√£o de APIs.
* **[MongoDB](https://www.mongodb.com/)**: Banco de dados NoSQL orientado a documentos.
* **[Mongoose](https://mongoosejs.com/)**: Biblioteca para modelagem de objetos MongoDB em Node.js.
* **[Dotenv](https://github.com/motdotla/dotenv)**: Para gerenciar vari√°veis de ambiente.
* **[Nodemon](https://nodemon.io/)**: Ferramenta que reinicia o servidor automaticamente durante o desenvolvimento.

---

## üîß Pr√©-requisitos

Antes de come√ßar, certifique-se de que voc√™ tem as seguintes ferramentas instaladas em sua m√°quina:
* [Node.js](https://nodejs.org/en/) (vers√£o 14 ou superior)
* [npm](https://www.npmjs.com/) (geralmente vem com o Node.js)
* [MongoDB](https://www.mongodb.com/try/download/community) (inst√¢ncia local ou uma conta no [MongoDB Atlas](https://www.mongodb.com/cloud/atlas))

---

## üöÄ Como Executar o Projeto

Siga os passos abaixo para rodar a aplica√ß√£o em seu ambiente local.

### üîå Backend

1.  **Navegue at√© a pasta do backend:**
    ```bash
    cd backend
    ```

2.  **Instale as depend√™ncias:**
    ```bash
    npm install
    ```

3.  **Configure as vari√°veis de ambiente:**
    * Crie um arquivo `.env` na raiz da pasta `backend`.
    * Copie o conte√∫do do exemplo abaixo e cole no seu arquivo `.env`, substituindo os valores conforme necess√°rio.

    **.env.example**
    ```ini
    # Porta em que a API ser√° executada
    PORT=3001

    # Sua string de conex√£o com o MongoDB
    MONGO_URI="mongodb://localhost:27017/projeto-site"
    ```

4.  **Inicie o servidor de desenvolvimento:**
    ```bash
    npm run dev
    ```
    * O servidor estar√° rodando em `http://localhost:3001`.

### üñ•Ô∏è Frontend

**Importante:** Mantenha o terminal do backend rodando e abra um **novo terminal** para o frontend.

1.  **Navegue at√© a pasta do frontend:**
    ```bash
    cd frontend
    ```

2.  **Instale as depend√™ncias:**
    ```bash
    npm install
    ```

3.  **Inicie o servidor de desenvolvimento:**
    ```bash
    npm run dev
    ```
    * A aplica√ß√£o React estar√° dispon√≠vel em `http://localhost:5173` (ou outra porta indicada pelo Vite).

---

## üìÅ Estrutura de Pastas

O projeto √© dividido em duas pastas principais:

* **`/backend`**: Cont√©m toda a l√≥gica do servidor, incluindo a API, conex√£o com o banco de dados e modelos.
    * `/config`: Arquivos de configura√ß√£o (ex: conex√£o com DB).
    * `/controllers`: Fun√ß√µes que executam a l√≥gica de neg√≥cio para cada rota.
    * `/models`: Schemas do Mongoose que definem a estrutura dos dados.
    * `/routes`: Defini√ß√£o dos endpoints da API.
* **`/frontend`**: Cont√©m a aplica√ß√£o cliente desenvolvida em React.
    * `/src`: C√≥digo-fonte da aplica√ß√£o.
        * `/components`: Componentes reutiliz√°veis.
        * `/pages`: P√°ginas da aplica√ß√£o.
        * `/services`: Fun√ß√µes para se comunicar com a API.

---

## üì° Endpoints da API

A API atualmente possui os seguintes endpoints para o recurso de usu√°rios:

| M√©todo | Rota               | Descri√ß√£o                        |
| :----- | :----------------- | :--------------------------------- |
| `POST` | `/api/users`       | Cria um novo usu√°rio.              |
| `GET`  | `/api/users`       | Lista todos os usu√°rios.           |
| `GET`  | `/api/users/:id`   | Busca um usu√°rio espec√≠fico por ID.|

**Exemplo de corpo para `POST /api/users`:**
```json
{
  "name": "Nome do Usu√°rio",
  "email": "usuario@email.com",
  "password": "senhaSegura123"
}